# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11J48T_SNvgRwYSu9C8mWGzWk13Pd8-c8
"""

# Import modules
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_train = pd.read_csv('train.csv')

df_test = pd.read_csv('test.csv')

df_train.head()

df_train.columns

df_train.shape

"""Please read about pandas top functions and variables"""

df_test.head()

df_test.shape

df_test.columns

sns.countplot(x='Survived', data=df_train)

sns.catplot(x='Survived', col='Sex', kind='count', data=df_train)

# % Female Survived in Female and over Sex

sns.catplot(x='Survived', col='Sex', kind='count', data=df_train)

sns.catplot(x='Survived', col='Sex',hue='Pclass', kind='count', data=df_train)

"""#learn sns plots options"""

sns.catplot(
    x='Survived',
    col='Embarked',
    kind='count',
    data=df_train
)

sns.heatmap(pd.crosstab(df_train['Sex'], df_train['Pclass']), annot=True,fmt='d')

#Read about cross tab

sns.histplot(df_train['Age'])

df_train.describe()

sns.histplot(df_train['Fare'])

sns.boxplot(df_train['Age'])

sns.boxplot(df_train['Fare'])

sns.scatterplot(x='Age', y='Fare', hue='Survived', data=df_train)

sns.lmplot(x='Age', y='Fare', hue='Survived',line_kws={'visible': False}, data=df_train)

sns.jointplot(x='Age', y='Fare', data=df_train)

sns.boxplot(x='Pclass', y='Age', data=df_train)

sns.violinplot(x='Sex', y='Age', data=df_train)

sns.stripplot(x='Survived', y='Fare', data=df_train)

sns.swarmplot(x='Pclass', y='Age', hue='Survived', data=df_train)

sns.violinplot(x='Sex', y='Age',hue='Survived',data=df_train)

sns.pairplot(df_train, hue='Survived')

df_train.isnull().sum()

df_train.shape

891-687

891-2

891-177

df_train.head()

"""# When to use mean and when to use mod in numerical data impution"""

df_train['Embarked'].value_counts(True)

#Machine learning algo's understand only numeric or numbers- they dont take strings, null values

# Impute missing values for Age, Fare, Embarked
df_train['Age'] = df_train.Age.fillna(df_train.Age.median())
df_train['Fare'] = df_train.Fare.fillna(df_train.Fare.median())
df_train['Embarked'] = df_train['Embarked'].fillna('S')

df_train.dtypes

df_train['Sex'].head()

df_train['Embarked'].value_counts()

s

df_train[['Sex','Embarked']].head()

df_train = pd.get_dummies(df_train, columns=['Sex', 'Embarked'], drop_first=True)

df_train.isnull().sum()

df_train.columns

df_train.head()

features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex_male', 'Embarked_Q', 'Embarked_S']
X = df_train[features]
y = df_train['Survived']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

df_train.shape

X_train.shape

X_train.tail()

y_train.shape

y_train.tail()

X_test.shape

X_test.head()

y_test.head()

[1, 0, 0, 1, 1]
[0, 0, 0, 1, 1]

y_pred

X_train.isnull().sum()

X_train.isnull().sum()

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)



from sklearn.metrics import accuracy_score, confusion_matrix,precision_score, recall_score, f1_score


accuracy_score(y_test, y_pred)

confusion_matrix(y_test, y_pred)

precision_score(y_test, y_pred)

recall_score(y_test, y_pred)

f1_score(y_test, y_pred)

y_test_list = list(y_test)
y_pred_list = list(y_pred)

df_results = X_test.copy()
df_results['y_test'] = y_test_list
df_results['y_pred'] = y_pred_list

TP = TN = FP = FN = 0

for i, row in df_results.iterrows():
    actual = row['y_test']
    pred = row['y_pred']
    if actual == 1 and pred == 1:
        TP += 1
    elif actual == 0 and pred == 0:
        TN += 1
    elif actual == 0 and pred == 1:
        FP += 1
    elif actual == 1 and pred == 0:
        FN += 1

total = TP + TN + FP + FN
accuracy = (TP + TN) / total

TP

TN

FP

FN

total

accuracy

precision = TP / (TP + FP)

precision

recall = TP / (TP + FN)

recall

f1_score = 2 * (precision * recall) / (precision + recall)

f1_score

